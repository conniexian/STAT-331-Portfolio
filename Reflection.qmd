---
title: "STAT 331 Portfolio"
author: "Connie Xian"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

# Lab 2 Question 1
surveys <- read_csv(here::here("Week 2", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2

# Lab 3 Question 2
teacher_evals <- read_csv(here::here("Week 3", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# Check-In 2.2
agesxl <- read_xlsx(path = here::here("Week 2", "Check-ins", "Ages_Data", "ages.xlsx"),
                    sheet = "ages")
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

# Lab 3 Question 7
instructors <- teacher_evals_clean |> 
  select(teacher_id, academic_degree, seniority, sex) |> 
  distinct(teacher_id, .keep_all = TRUE)
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

# Lab 5 - The Witnesses (Revised for Portfolio)
person |> 
  filter(address_street_name == "Northwestern Dr") |>  # Find first witness
  slice_max(address_number) |> 
  left_join(y = interview,                             # Search for interview by person_id
            by = join_by(id == person_id)) |>          
  select(-(id:ssn))  |>                                # View interview transcript
  kable(col.names = "Clue #2")
```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
# need to modify (check slides for starts_with())
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

# Lab 3 Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(across(.cols = c(teacher_id, question_no, academic_degree, sex),
                .fns = ~ as.factor(.x))) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-2

# Lab 3 - Question 12
teacher_evals_clean |> 
  group_by(teacher_id, seniority, sex) |> 
  filter(academic_degree %in% c("prof", "dr")) |> 
  summarize(resp_rate = mean(resp_share),
            .groups = "drop") |> 
  filter(resp_rate == max(resp_rate) | 
         resp_rate == min(resp_rate)) |>
  arrange(resp_rate) |>
  kable()
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

# Lab 3 - Question 12

# Feedback: I would recommend using the %in% operator instead of the or!
# Revision Reflection: Initially, I used an | operator to filter the data.
# However, by using the %in% operator, I can increase the efficiency of my 
# code. Using the %in% operator also makes my code more easily readable, 
# since it is more clear how the data is being filtered now.

teacher_evals_clean |> 
  group_by(teacher_id, seniority, sex) |> 
  filter(academic_degree %in% c("prof", "dr")) |> 
  summarize(resp_rate = mean(resp_share),
            .groups = "drop") |> 
  filter(resp_rate == max(resp_rate) | 
         resp_rate == min(resp_rate)) |>
  arrange(resp_rate) |>
  kable()
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5 - Inspecting the Crime Scene (Revised for Portfolio)
get_fit_now_member |>
  filter(membership_status == "gold",                  # Find all gold members with a membership
         str_sub(id, start = 1, end = 3) == "48Z") |>  # number that start with 48Z
  left_join(person,
            join_by(person_id == id, name)) |>         # Use person data to find associated license
  left_join(drivers_license,                           # Use license data to find suspect with plate
            join_by(license_id == id))  |>             # number that includes "H42"
  filter(str_detect(plate_number,
                    pattern = "H42W")) |> 
  left_join(get_fit_now_check_in,                      # Check that date matches statement from  
            join_by(id == membership_id)) |>           # second witness
  filter(ymd(check_in_date) == "2018-01-09") |> 
  left_join(interview,                                     
            join_by(person_id)) |>                     # Retrieve suspect interview
  select(transcript)   |>                              # View interview transcript
  kable(col.names = "Clue #4")
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 5 - Inspecting the Crime Scene (Revised for Portfolio)
get_fit_now_member |>
  filter(membership_status == "gold",                  # Find all gold members with a membership
         str_sub(id, start = 1, end = 3) == "48Z") |>  # number that start with 48Z
  left_join(person,
            join_by(person_id == id, name)) |>         # Use person data to find associated license
  left_join(drivers_license,                           # Use license data to find suspect with plate
            join_by(license_id == id))  |>             # number that includes "H42"
  filter(str_detect(plate_number,
                    pattern = "H42W")) |> 
  left_join(get_fit_now_check_in,                      # Check that date matches statement from  
            join_by(id == membership_id)) |>           # second witness
  filter(ymd(check_in_date) == "2018-01-09") |> 
  left_join(interview,                                     
            join_by(person_id)) |>                     # Retrieve suspect interview
  select(transcript)   |>                              # View interview transcript
  kable(col.names = "Clue #4")
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

# Challenge 3 Question 1
teacher_evals_compare <- teacher_evals |> 
  filter(question_no == 903) |> 
  mutate(SET_level = if_else(SET_score_avg >= 4,
                             "excellent",
                             "standard"),
         sen_level = case_when(seniority <= 4                 ~ "junior",
                               seniority > 4 & seniority <= 8 ~ "senior",
                               seniority > 8                  ~ "very senior")) |> 
  select(course_id,
         SET_level,
         sen_level)
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

# modify
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

# Lab 4 Revisions Question 7

colors <- colorRampPalette(RColorBrewer::brewer.pal(7, "Accent"))(10)    # color palette

ca_childcare |> 
  select(census_region,
         county_name,
         study_year,
         Infant = mc_infant,
         Toddler = mc_toddler,
         Preschool = mc_preschool) |> 
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "age_group",
               values_to = "median_price") |>
  mutate(age_group = fct(age_group,
                         levels = c("Infant", "Toddler", "Preschool")),
         census_region = fct_reorder2(.f = census_region,
                                     .x = study_year,
                                     .y = median_price,
                                     .desc = TRUE)) |> 
  ggplot(mapping = aes(x = study_year, y = median_price, color = census_region)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(vars(age_group)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6),
        title = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm")) +
  scale_x_continuous(n.breaks = 7) +
  scale_y_continuous(limits = c(100,500)) +
  scale_color_manual(values = colors,
                     labels = c("San Francisco Bay Area",
                                "Orange County",
                                "Los Angeles County",
                                "North San Joaquin Valley",
                                "Central Coast",
                                "Inland Empire",
                                "Superior California",
                                "South San Joaquin Valley",
                                "San Diego - Imperial",
                                "North Coast")) +
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "Calfornia Region")
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# Lab 5 - Inspecting the Crime Scene (Revised for Portfolio)
get_fit_now_member |>
  mutate(id_starting_3 = str_sub(id,                   # Find all gold members with a membership
                                 start = 1,            # number that start with 48Z
                                 end = 3)) |> 
  filter(membership_status == "gold",                  
         id_starting_3 == "48Z") |>                    
  left_join(person,                                    # Use person data to find associated license
            join_by(person_id == id, name)) |>        
  left_join(drivers_license,                           # Use license data to find suspect with plate
            join_by(license_id == id))  |>             # number that includes "H42"
  filter(str_detect(plate_number,
                    pattern = "H42W")) |> 
  left_join(get_fit_now_check_in,                      # Check that date matches statement from  
            join_by(id == membership_id)) |>           # second witness
 ilter(ymd(check_in_date) == "2018-01-09") |> 
  left_join(interview,                                     
            join_by(person_id)) |>                     # Retrieve suspect interview
  select(transcript)   |>                              # View interview transcript
  kable(col.names = "Clue #4")
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

# Lab 5 - Inspecting the Crime Scene (Revised for Portfolio)
get_fit_now_member |>
  filter(membership_status == "gold",                  # Find all gold members with a membership
         str_sub(id, start = 1, end = 3) == "48Z") |>  # number that start with 48Z
  left_join(person,
            join_by(person_id == id, name)) |>         # Use person data to find associated license
  left_join(drivers_license,                           # Use license data to find suspect with plate
            join_by(license_id == id))  |>             # number that includes "H42"
  filter(str_detect(plate_number,
                    pattern = "H42W")) |> 
  left_join(get_fit_now_check_in,                      # Check that date matches statement from  
            join_by(id == membership_id)) |>           # second witness
  mutate(check_in_date = ymd(check_in_date)) |> 
  filter(check_in_date == "2018-01-09") |> 
  left_join(interview,                                     
            join_by(person_id)) |>                     # Retrieve suspect interview
  select(transcript)   |>                              # View interview transcript
  kable(col.names = "Clue #4")
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

# Lab 5 - Inspecting the Crime Scene (Revised for Portfolio)
get_fit_now_member |>
  filter(membership_status == "gold",                  # Find all gold members with a membership
         str_sub(id, start = 1, end = 3) == "48Z") |>  # number that start with 48Z
  left_join(person,
            join_by(person_id == id, name)) |>         # Use person data to find associated license
  left_join(drivers_license,                           # Use license data to find suspect with plate
            join_by(license_id == id))  |>             # number that includes "H42"
  filter(str_detect(plate_number,
                    pattern = "H42W")) |> 
  left_join(get_fit_now_check_in,                      # Check that date matches statement from  
            join_by(id == membership_id)) |>           # second witness
  filter(ymd(check_in_date) == "2018-01-09") |> 
  left_join(interview,                                     
            join_by(person_id)) |>                     # Retrieve suspect interview
  select(transcript)   |>                              # View interview transcript
  kable(col.names = "Clue #4")
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
# need to modify
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

# Lab 5 - Investigating the Witnesses

# Searching for Witness 1
person |> 
  filter(address_street_name == "Northwestern Dr") |>  # Find first witness
  slice_max(address_number) |> 
  left_join(y = interview,                             # Search for interview by person_id
            by = join_by(id == person_id)) |>          
  select(transcript)  |>                               # View interview transcript
  kable(col.names = "Clue #2")

# Searching for Witness 2
person |> 
  filter(address_street_name == "Franklin Ave",        # Find second witness
         str_detect(name,
                    pattern = "Annabel")) |> 
  left_join(y = interview,                             # Search for interview by person_id
            by = join_by(id == person_id)) |>          
  select(transcript)  |>                               # View interview transcript
  kable(col.names = "Clue #3")
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# need to modify
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
# need to modify
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
# need to modify
```

-   `anti_join()`

```{r}
#| label: wd-6-anti
# need to modify
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Lab 4 Revision Question 7
colors <- colorRampPalette(RColorBrewer::brewer.pal(7, "Accent"))(10) # color palette

ca_childcare |> 
  select(census_region,
         county_name,
         study_year,
         Infant = mc_infant,
         Toddler = mc_toddler,
         Preschool = mc_preschool) |> 
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "age_group",
               values_to = "median_price") |>
  mutate(age_group = fct(age_group,
                         levels = c("Infant", "Toddler", "Preschool")),
         census_region = fct_reorder2(.f = census_region,
                                     .x = study_year,
                                     .y = median_price,
                                     .desc = TRUE)) |> 
  ggplot(mapping = aes(x = study_year, y = median_price, color = census_region)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(vars(age_group)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6),
        title = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm")) +
  scale_x_continuous(n.breaks = 7) +
  scale_y_continuous(limits = c(100,500)) +
  scale_color_manual(values = colors,
                     labels = c("San Francisco Bay Area",
                                "Orange County",
                                "Los Angeles County",
                                "North San Joaquin Valley",
                                "Central Coast",
                                "Inland Empire",
                                "Superior California",
                                "South San Joaquin Valley",
                                "San Diego - Imperial",
                                "North Coast")) +
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "Calfornia Region") 
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Lab 4 Question 5
ca_childcare |> 
  filter(study_year %in% c("2008", "2018")) |> 
  group_by(census_region, study_year)  |> 
  summarize(median_household_inc = median(mhi_2018),
            .groups = "drop") |> 
  pivot_wider(names_from = study_year,
              values_from = median_household_inc,
              names_prefix = "median_income_") |> 
  arrange(desc(median_income_2018))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 2
-   Lab 3
-   Challenge 3
-   Challenge 4
-   Lab 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Challenge 4 Analysis (Revised for Portfolio)
childcare2018 |> 
  pivot_longer(cols = c("center_based_care","family_childcare"),
               names_to = "care_type",
               values_to = "price")  |>
  mutate(care_type = fct(care_type)) |> 
  ggplot(mapping = aes(x = price, y = age_group, fill = care_type)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(mapping = aes(color = care_type),
              size = 0.75,
              alpha = 1,
              position = position_jitterdodge()) +
  theme_bw() +
  labs(x = NULL,
       y = NULL,
       title = "Center-Based Childcare: Significantly More Expensive",
       fill = "Type of Care") +
  guides(color = "none") +
  scale_color_manual(values = c("#96475D","#3C3E78")) +
  scale_fill_manual(values = c(family_childcare = "#BFC1FF", center_based_care = "#FFABC3"), 
                    limits = c("family_childcare", "center_based_care"),
                    labels = c("Family Childcare", "Center-Based Care")) +
  scale_x_continuous(labels = dollar)
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# Lab 5 - Inspecting the Crime Scene (Revised for Portfolio)
get_fit_now_member |>
  filter(membership_status == "gold",                  # Find all gold members with a membership
         str_sub(id, start = 1, end = 3) == "48Z") |>  # number that start with 48Z
  left_join(person,
            join_by(person_id == id, name)) |>         # Use person data to find associated license
  left_join(drivers_license,                           # Use license data to find suspect with plate
            join_by(license_id == id))  |>             # number that includes "H42"
  filter(str_detect(plate_number,
                    pattern = "H42W")) |> 
  left_join(get_fit_now_check_in,                      # Check that date matches statement from  
            join_by(id == membership_id)) |>           # second witness
  filter(ymd(check_in_date) == "2018-01-09") |> 
  left_join(interview,                                     
            join_by(person_id)) |>                     # Retrieve suspect interview
  select(transcript)   |>                              # View interview transcript
  kable(col.names = "Clue #4")
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

# Lab 3 - Question 12
teacher_evals_clean |> 
  group_by(teacher_id, seniority, sex) |> 
  filter(academic_degree %in% c("prof", "dr")) |> 
  summarize(resp_rate = mean(resp_share),
            .groups = "drop") |> 
  filter(resp_rate == max(resp_rate) | 
         resp_rate == min(resp_rate)) |>
  arrange(resp_rate) |>
```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

# Lab 4 Revisions Question 8
ca_childcare |> 
  ggplot(mapping = aes(x = mhi_2018, y = mc_infant)) +
  geom_point(size = 0.75) +
  geom_smooth(method = "lm") +
  theme_bw() +
  labs(x = "Median Household Income (in 2018 dollars)",
       y = NULL,
       title = "Median Weekly Price for Center-based Childcare for Infants in California") +
  scale_x_continuous(labels = dollar) +
  scale_y_continuous(labels = dollar)
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Challenge 2 (Revised for Portfolio)
ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
   geom_jitter(color = "darkslateblue", alpha = 0.5, size = 0.5) +
   geom_boxplot(outliers = FALSE, linewidth = 0.25, color = "gray10") +
   labs(x = "Weight (g)",
        y = "",
        subtitle = "Rodent Species",
        title = "Heaviest Portal, AZ Rodents: Abigula, Spectabilis, and Hispidus") +
   theme_bw() +
   theme(plot.title = element_text(face = "bold",                     # title formatting
                                   size = 15, 
                                   margin = margin(t = 10, b = 10)),
         axis.ticks = element_line(linewidth = 0.1),                  # axis label formatting
         axis.text = element_text(size = 7),
         panel.grid.major.y = element_line(linewidth = 0.1),          # remove y gridlines and border 
         panel.border = element_rect(linewidth = 0.25))

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

# Challenge 4 Analysis (Revised for Portfolio)
childcare2018 |> 
  pivot_longer(cols = c("center_based_care","family_childcare"),
               names_to = "care_type",
               values_to = "price")  |>
  mutate(care_type = fct(care_type)) |> 
  ggplot(mapping = aes(x = price, y = age_group, fill = care_type)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(mapping = aes(color = care_type),
              size = 0.75,
              alpha = 1,
              position = position_jitterdodge()) +
  theme_bw() +
  labs(x = NULL,
       y = NULL,
       title = "Center-Based Childcare: Significantly More Expensive",
       fill = "Type of Care") +
  guides(color = "none") +
  scale_color_manual(values = c("#96475D","#3C3E78")) +
  scale_fill_manual(values = c(family_childcare = "#BFC1FF", center_based_care = "#FFABC3"), 
                    limits = c("family_childcare", "center_based_care"),
                    labels = c("Family Childcare", "Center-Based Care")) +
  scale_x_continuous(labels = dollar)
```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

# Lab 4 Revisions Question 7
colors <- colorRampPalette(RColorBrewer::brewer.pal(7, "Accent"))(10) # color palette

ca_childcare |> 
  select(census_region,
         county_name,
         study_year,
         Infant = mc_infant,
         Toddler = mc_toddler,
         Preschool = mc_preschool) |> 
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "age_group",
               values_to = "median_price") |>
  mutate(age_group = fct(age_group,
                         levels = c("Infant", "Toddler", "Preschool")),
         census_region = fct_reorder2(.f = census_region,
                                     .x = study_year,
                                     .y = median_price,
                                     .desc = TRUE)) |> 
  ggplot(mapping = aes(x = study_year, y = median_price, color = census_region)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(vars(age_group)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6),
        title = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm")) +
  scale_x_continuous(n.breaks = 7) +
  scale_y_continuous(limits = c(100,500)) +
  scale_color_manual(values = colors,
                     labels = c("San Francisco Bay Area",
                                "Orange County",
                                "Los Angeles County",
                                "North San Joaquin Valley",
                                "Central Coast",
                                "Inland Empire",
                                "Superior California",
                                "South San Joaquin Valley",
                                "San Diego - Imperial",
                                "North Coast")) +
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "Calfornia Region")
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Challenge 4 Analysis (Revised for Portfolio)
childcare2018 |> 
  pivot_longer(cols = c("center_based_care","family_childcare"),
               names_to = "care_type",
               values_to = "price")  |>
  mutate(care_type = fct(care_type)) |> 
  ggplot(mapping = aes(x = price, y = age_group, fill = care_type)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(mapping = aes(color = care_type),
              size = 0.75,
              alpha = 1,
              position = position_jitterdodge()) +
  theme_bw() +
  labs(x = NULL,
       y = NULL,
       title = "Center-Based Childcare: Significantly More Expensive",
       fill = "Type of Care") +
  guides(color = "none") +
  scale_color_manual(values = c("#96475D","#3C3E78")) +
  scale_fill_manual(values = c(family_childcare = "#BFC1FF", center_based_care = "#FFABC3"), 
                    limits = c("family_childcare", "center_based_care"),
                    labels = c("Family Childcare", "Center-Based Care")) +
  scale_x_continuous(labels = dollar)
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

# Challenge 4 Analysis (Revised for Portfolio)
childcare2018 |> 
  pivot_longer(cols = c("center_based_care","family_childcare"),
               names_to = "care_type",
               values_to = "price")  |> 
  ggplot(mapping = aes(x = price, y = age_group, fill = care_type)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(mapping = aes(color = care_type),                     
              size = 0.75,                                 
              position = position_jitterdodge()) + 
  theme_bw() +
  labs(x = NULL,
       y = NULL,
       title = "Median Weekly Price of California Childcare in 2018",
       fill = "Type of Care") +
  guides(color = "none") +
  scale_color_manual(values = c("#96475D","#3C3E78")) +
  scale_fill_manual(values = c("#FFABC3","#BFC1FF"), 
                    labels = c("Center Based Care", "Family Childcare")) +
  scale_x_continuous(labels = dollar) 
```

![](images/clipboard-2794975299.png){width="282"}

*Resource: Coloring for Colorblindness by David Nichols*

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

# Challenge 4 Analysis (Revised for Portfolio)
childcare2018 |> 
  pivot_longer(cols = c("center_based_care","family_childcare"),
               names_to = "care_type",
               values_to = "price")  |>
  mutate(care_type = fct(care_type)) |> 
  ggplot(mapping = aes(x = price, y = age_group, fill = care_type)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(mapping = aes(color = care_type),
              size = 0.75,
              alpha = 1,
              position = position_jitterdodge()) +
  theme_bw() +
  labs(x = NULL,
       y = NULL,
       title = "Center-Based Childcare: Significantly More Expensive",
       fill = "Type of Care") +
  guides(color = "none") +
  scale_color_manual(values = c("#96475D","#3C3E78")) +
  scale_fill_manual(values = c(family_childcare = "#BFC1FF", center_based_care = "#FFABC3"), 
                    limits = c("family_childcare", "center_based_care"),
                    labels = c("Family Childcare", "Center-Based Care")) +
  scale_x_continuous(labels = dollar)
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

# Challenge 2 (Revised for Portfolio)
ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
   geom_jitter(color = "darkslateblue", alpha = 0.5, size = 0.5) +
   geom_boxplot(outliers = FALSE, linewidth = 0.25, color = "gray10") +
   labs(x = "Weight (g)",
        y = "",
        subtitle = "Rodent Species",
        title = "Heaviest Portal, AZ Rodents: Abigula, Spectabilis, and Hispidus") +
   theme_bw() +
   theme(plot.title = element_text(face = "bold",                     # title formatting
                                   size = 15, 
                                   margin = margin(t = 10, b = 10)),
         axis.ticks = element_line(linewidth = 0.1),                  # axis label formatting
         axis.text = element_text(size = 7),
         panel.grid.major.y = element_line(linewidth = 0.1),          # remove y gridlines and border 
         panel.border = element_rect(linewidth = 0.25))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

# Challenge 4 Analysis (Revised for Portfolio)
childcare2018 |> 
  pivot_longer(cols = c("center_based_care","family_childcare"),
               names_to = "care_type",
               values_to = "price")  |>
  mutate(care_type = fct(care_type)) |> 
  ggplot(mapping = aes(x = price, y = age_group, fill = care_type)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(mapping = aes(color = care_type),
              size = 0.75,
              alpha = 1,
              position = position_jitterdodge()) +
  theme_bw() +
  labs(x = NULL,
       y = NULL,
       title = "Center-Based Childcare: Significantly More Expensive",
       fill = "Type of Care") +
  guides(color = "none") +
  scale_color_manual(values = c("#96475D","#3C3E78")) +
  scale_fill_manual(values = c(family_childcare = "#BFC1FF", center_based_care = "#FFABC3"), 
                    limits = c("family_childcare", "center_based_care"),
                    labels = c("Family Childcare", "Center-Based Care")) +
  scale_x_continuous(labels = dollar)
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

childcare2018 |> 
  pivot_longer(cols = c("center_based_care","family_childcare"),
               names_to = "care_type",
               values_to = "price")  |>
  mutate(care_type = fct(care_type)) |> 
  ggplot(mapping = aes(x = price, y = age_group, fill = care_type)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(mapping = aes(color = care_type),
              size = 0.75,
              alpha = 1,
              position = position_jitterdodge()) +
  theme_bw() +
  labs(x = NULL,
       y = NULL,
       title = "Center-Based Childcare: Significantly More Expensive",
       fill = "Type of Care") +
  guides(color = "none") +
  scale_color_manual(values = c("#96475D","#3C3E78")) +
  scale_fill_manual(values = c(family_childcare = "#BFC1FF", center_based_care = "#FFABC3"), 
                    limits = c("family_childcare", "center_based_care"),
                    labels = c("Family Childcare", "Center-Based Care")) +
  scale_x_continuous(labels = dollar)
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

# Challenge 2 (Revised for Portfolio)
ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
   geom_jitter(color = "darkslateblue", alpha = 0.5, size = 0.5) +
   geom_boxplot(outliers = FALSE, linewidth = 0.25, color = "gray10") +
   labs(x = "Weight (g)",
        y = "",
        subtitle = "Rodent Species",
        title = "Heaviest Portal, AZ Rodents: Abigula, Spectabilis, and Hispidus") +
   theme_bw() +
   theme(plot.title = element_text(face = "bold",                     # title formatting
                                   size = 15, 
                                   margin = margin(t = 10, b = 10)),
         axis.ticks = element_line(linewidth = 0.1),                  # axis label formatting
         axis.text = element_text(size = 7),
         panel.grid.major.y = element_line(linewidth = 0.1),          # remove y gridlines and border 
         panel.border = element_rect(linewidth = 0.25))
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# Lab 3 Question 5
teacher_evals_clean |> 
  summarize(unique_instructors = n_distinct(teacher_id),
            unique_courses = n_distinct(course_id))
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Lab 3 Question 9
teacher_evals_clean |> 
  group_by(course_id, teacher_id) |> 
  summarize(num_question = n_distinct(question_no),
            .groups = "drop") |> 
  filter(num_question == 9)
```

-   Example 2

```{r}
#| label: dvs-5-2

# Lab 4 Question 6
ca_childcare |> 
  filter(study_year == 2018) |> 
  group_by(census_region, study_year) |> 
  summarize(median_mc_infant = median(mc_infant),
            .groups = "drop") |> 
  slice_min(median_mc_infant)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

# Challenge 4 Analysis
childcare2018 |>   
  group_by(county_name) |> 
  summarize(median_cbc = median(center_based_care),
            median_fcc = median(family_childcare)) |> 
  mutate(Higher = ifelse(median_fcc > median_cbc, "Yes", " ")) |> 
  arrange(desc(Higher), desc(median_fcc)) |> 
  kable(col.names = c("County", "Center-based Care", "Family Childcare", "Higher?"),
        caption = "Median Weekly Price of Childcare in 2018 by California County ($)")
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

# Challenge 4 Analysis
childcare2018 |>   
  group_by(county_name) |> 
  summarize(median_cbc = median(center_based_care),
            median_fcc = median(family_childcare)) |> 
  mutate(Higher = ifelse(median_fcc > median_cbc, "Yes", " ")) |> 
  arrange(desc(Higher), desc(median_fcc)) |> 
  kable(col.names = c("County", "Center-based Care", "Family Childcare", "Higher?"),
        caption = "Median Weekly Price of Childcare in 2018 by California County ($)")
```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

# Challenge 4 Analysis
childcare2018 |>   
  group_by(county_name) |> 
  summarize(median_cbc = median(center_based_care),
            median_fcc = median(family_childcare)) |> 
  mutate(Higher = ifelse(median_fcc > median_cbc, "Yes", " ")) |> 
  arrange(desc(Higher), desc(median_fcc)) |> 
  kable(col.names = c("County", "Center-based Care", "Family Childcare", "Higher?"),
        caption = "Median Weekly Price of Childcare in 2018 by California County ($)")
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

# Challenge 4 Analysis (Revised for Portfolio)
childcare2018 |> 
  pivot_longer(cols = c("center_based_care","family_childcare"),
               names_to = "care_type",
               values_to = "price")  |>
  mutate(care_type = fct(care_type)) |> 
  ggplot(mapping = aes(x = price, y = age_group, fill = care_type)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(mapping = aes(color = care_type),
              size = 0.75,
              alpha = 1,
              position = position_jitterdodge()) +
  theme_bw() +
  labs(x = NULL,
       y = NULL,
       title = "Center-Based Childcare: Significantly More Expensive",
       fill = "Type of Care") +
  guides(color = "none") +
  scale_color_manual(values = c("#96475D","#3C3E78")) +
  scale_fill_manual(values = c(family_childcare = "#BFC1FF", center_based_care = "#FFABC3"), 
                    limits = c("family_childcare", "center_based_care"),
                    labels = c("Family Childcare", "Center-Based Care")) +
  scale_x_continuous(labels = dollar)
```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# Lab 3 Question 10

# Revision Reflection: Initially, I had two separate filter functions
# for the question number and the instructors. I realize now that it 
# would be more efficient to just use one filter function and input two
# arguments to only call the function one time.

teacher_evals_clean |> 
  group_by(teacher_id) |> 
  filter(n() >= 5,
         question_no == 901) |> 
  summarize(Q1_avg_rating = mean(SET_score_avg)) |> 
  filter(Q1_avg_rating == max(Q1_avg_rating) | 
         Q1_avg_rating == min(Q1_avg_rating)) |>
  arrange(Q1_avg_rating) |> 
  kable()
```

-   using `across()`

```{r}
#| label: pe-1-across

# Lab 3 Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(across(.cols = c(teacher_id, question_no, academic_degree, sex),
                .fns = ~ as.factor(.x))) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3: I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

# Lab 3 Question 5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(across(.cols = c(teacher_id, question_no, academic_degree, sex),
                .fns = ~ as.factor(.x))) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

# Lab 4 Revisions Question 7

# Revision Reflection (section): ... Secondly, I revised the code that sets 
# the width of the line in geom_smooth(). Initially, I used "size" as the argument
# to set the width. However, I see now that there is a warning that states the
# 'size' aesthetic for lines was deprecated in a previous version and I should 
# have used 'linewidth' instead. Using a modern tool will help prevent issues 
# with running my code in the future.

colors <- colorRampPalette(RColorBrewer::brewer.pal(7, "Accent"))(10)   # color palette

ca_childcare |> 
  select(census_region,
         county_name,
         study_year,
         Infant = mc_infant,
         Toddler = mc_toddler,
         Preschool = mc_preschool) |> 
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "age_group",
               values_to = "median_price") |>
  mutate(age_group = fct(age_group,
                         levels = c("Infant", "Toddler", "Preschool")),
         census_region = fct_reorder2(.f = census_region,
                                     .x = study_year,
                                     .y = median_price,
                                     .desc = TRUE)) |> 
  ggplot(mapping = aes(x = study_year, y = median_price, color = census_region)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(vars(age_group)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6),
        title = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm")) +
  scale_x_continuous(n.breaks = 7) +
  scale_y_continuous(limits = c(100,500)) +
  scale_color_manual(values = colors,
                     labels = c("San Francisco Bay Area",
                                "Orange County",
                                "Los Angeles County",
                                "North San Joaquin Valley",
                                "Central Coast",
                                "Inland Empire",
                                "Superior California",
                                "South San Joaquin Valley",
                                "San Diego - Imperial",
                                "North Coast")) +
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "Calfornia Region") 
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

# Lab 4 Revisions Question 7

colors <- colorRampPalette(RColorBrewer::brewer.pal(7, "Accent"))(10)  # color palette

ca_childcare |> 
  select(census_region,
         county_name,
         study_year,
         Infant = mc_infant,
         Toddler = mc_toddler,
         Preschool = mc_preschool) |> 
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "age_group",
               values_to = "median_price") |>
  mutate(age_group = fct(age_group,
                         levels = c("Infant", "Toddler", "Preschool")),
         census_region = fct_reorder2(.f = census_region,
                                     .x = study_year,
                                     .y = median_price,
                                     .desc = TRUE)) |> 
  ggplot(mapping = aes(x = study_year, y = median_price, color = census_region)) +
  geom_point(size = 0.5) +
  geom_smooth(linewidth = 0.5) +
  facet_wrap(vars(age_group)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 6),
        title = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm")) +
  scale_x_continuous(n.breaks = 7) +
  scale_y_continuous(limits = c(100,500)) +
  scale_color_manual(values = colors,
                     labels = c("San Francisco Bay Area",
                                "Orange County",
                                "Los Angeles County",
                                "North San Joaquin Valley",
                                "Central Coast",
                                "Inland Empire",
                                "Superior California",
                                "South San Joaquin Valley",
                                "San Diego - Imperial",
                                "North Coast")) +
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "Calfornia Region") 
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

# Challenge 3 Question 3
chisq.test(teacher_evals_compare$sen_level,teacher_evals_compare$SET_level)
```

-   Example 2

```{r}
#| label: dsm-2-2

# Lab 4 Question 9 (Revised for Portfolio)
lm(mc_infant ~ mhi_2018, data = ca_childcare) |> 
  summary()
```

-   Example 3

```{r}
#| label: dsm-2-3

# Lab 2 Question 17 (Revised for Portfolio)
aov(weight ~ species, data = surveys) |> 
  summary()
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
